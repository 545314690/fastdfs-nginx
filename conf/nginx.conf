
## user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include            /etc/nginx/mime.types;
    default_type       application/octet-stream;
    sendfile           on;
    keepalive_timeout  60;

    gzip  on;
    gzip_min_length 1k;
    gzip_buffers 4 16k;
    gzip_comp_level 2;
    gzip_types text/plain application/x-javascript text/css application/xml text/javascript image/jpeg image/gif image/png image/bmp;
    gzip_vary off;
    gzip_disable "MSIE [1-6]\.";

    upstream redisbackend {
        server 192.168.99.100:6379;
        # a pool with at most 1024 connections
        # and do not distinguish the servers:
        keepalive 1024;
    }

    server {
        listen       8080;
        server_name  localhost;

        charset utf-8;

        location / {
            root   /usr/share/nginx/html;
			index  index.html index.htm;
        }

        ## match url like: http://ip:port/group1/M00/00/00/xxx?tk=xxx&&typ=xxx
        location ~ /group[0-9]+/M00/ {
            eval $answer {
                set $redis_key $arg_tk;
                redis_pass     redisbackend;
            }
            if ($answer = "") {
                # echo "{ code: 404 }";
                return 404;
            }
            if ($answer != "") {
                ## typ is file suffix
                proxy_pass http://127.0.0.1:8081$uri.$arg_typ;
            }
        }

        #error_page  404              /404.html;
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }
	
	## server port for fastdfs
    server {
        listen       8081;
        server_name  localhost;
        location ~ /group[0-9]+/M00/ {
            root /data/fdfs/data;
            ngx_fastdfs_module;
        }
    }
}